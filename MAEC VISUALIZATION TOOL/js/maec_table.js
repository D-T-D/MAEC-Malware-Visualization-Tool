/* Tabular and bootstrap were used in the making of this table. */
/* Initially, the XMLTable class is created with the uploaded file's data, color identifiers and elements */
class XMLTable {
    constructor({ el, color, data }) {
      this.el = el;
      this.color = color;
      this.data = data;
      this.wrangle();
    }
  
    /* Re-mapping the data which can be obtained from the hierarchy that was rendered by d3's tree graph  */
    /* Data relating to MAEC tag names and their total re-occurences are obtained from all of the nodes and displayed to the graph */
    wrangle() {
      this.tableData = Array.from(
        d3.rollup(
          d3
            .hierarchy(this.data.elements[0].elements[0], (d) => d.elements)
            .descendants(),
          (v) => v.length,
          (d) => d.data.name
        ),
        ([tag, count]) => ({ tag, count })
      ).sort(
        (a, b) => d3.descending(a.count, b.count) || d3.ascending(a.tag, b.tag)
      );
      
      /* For each element in the table, set the color identifier to it's respective one if the tag matches the constants.js configuration */
      this.tableData.forEach((d) => (d.color = this.color(d.tag)));
  
      /* Render the table */
      this.render();
    }
    
    /* Creating the custom bootstrap table in it's smallest configuration with borders for easier identification of reulsts */
    render() {
      if (!this.table) {
        this.el.classList.add("xml-table", "table-sm", "table-bordered");
  
        this.table = new Tabulator(this.el, {
          data: this.tableData,
          layout: "fitData",
          height: "540px",
          pagination: false,
          paginationCounter: "rows",
          selectable: 1,
          columns: [
            {
              title: "Color Identifier",
              field: "color",
              headerSort: false,
              hozAlign: "center",
              vertAlign: "middle",
              minWidth: 175,
              formatter: (cell) => {
                const color = cell.getValue();
                return `<span class="tag-color-swatch" style="background-color: ${color}"></span>`;
              },
            },
            {
              title: "MAEC Tag",
              field: "tag",
              sorter: "string",
              hozAlign: "center",
              vertAlignt: "middle",
              minWidth: 875,
              headerFilter: "input",
            },
            {
              title: "Count",
              field: "count",
              hozAlign: "center",
              vertAlign: "middle",
              sorter: "number",
              hozAlign: "left",
              minWidth: 175,
            },
          ],
        });
  
        /* Every row in the MAEC Results table has it's selectable property set to true, allowing for a custom function upon selection */
        /* Here, when a row is selected, the data ( MAEC Tag ) is obtained and the 'tagselectionchange' event is dispatched, to be used by the xml tree graph */
        /* All the nodes matching the selected row in the table are filtered */
        this.table.on("rowSelectionChanged", (data) => {
          this.el.dispatchEvent(
            new CustomEvent("tagselectionchange", {
              detail: data.map((d) => d.tag),
              bubbles: true,
            })
          );
        });
      } else {
        /* Set the table's results to their original state, and resetting the incremental / decreasing filters existing within the bootstrap table */
        this.table.setData(this.tableData);
        this.table.clearHeaderFilter();
      }
    }
  
    updateData(data) {
      this.data = data;
      this.wrangle();
    }
  }